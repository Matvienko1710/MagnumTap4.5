// –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tg = null;
try {
    tg = window.Telegram.WebApp;
    if (tg && tg.initData) {
        tg.ready();
        tg.expand();
        document.body.classList.add('tg-app');
        console.log('Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –±–æ–Ω—É—Å–∞—Ö');
    } else {
        console.log('Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    }
} catch (error) {
    console.log('Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', error);
}

// –î–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å–æ–≤
let bonusData = {
    lastClaimDate: null,
    streakDays: 0,
    totalClaimed: 0,
    history: []
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
function loadBonusData() {
    const saved = localStorage.getItem('magnumBonusData');
    if (saved) {
        bonusData = JSON.parse(saved);
    }
    updateBonusUI();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
function saveBonusData() {
    localStorage.setItem('magnumBonusData', JSON.stringify(bonusData));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –±–æ–Ω—É—Å–æ–≤
function updateBonusUI() {
    const today = new Date().toDateString();
    const canClaim = !bonusData.lastClaimDate || bonusData.lastClaimDate !== today;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏
    const progressFill = document.getElementById('weeklyProgress');
    const currentDay = document.getElementById('currentDay');
    const streakCount = document.getElementById('streakCount');
    
    if (progressFill) {
        progressFill.style.width = `${Math.min(bonusData.streakDays * 14.28, 100)}%`;
    }
    
    if (currentDay) {
        currentDay.textContent = Math.min(bonusData.streakDays, 7);
    }
    
    if (streakCount) {
        streakCount.textContent = bonusData.streakDays;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–Ω—É—Å
    const bonusAmount = document.getElementById('bonusAmount');
    const bonusMultiplier = document.getElementById('bonusMultiplier');
    const claimBtn = document.getElementById('claimBonusBtn');
    const nextBonusTime = document.getElementById('nextBonusTime');
    
    const baseBonus = 100;
    const multiplier = Math.min(1 + (bonusData.streakDays * 0.1), 2.0);
    const finalBonus = Math.floor(baseBonus * multiplier);
    
    if (bonusAmount) {
        bonusAmount.textContent = finalBonus;
    }
    
    if (bonusMultiplier) {
        bonusMultiplier.textContent = `x${multiplier.toFixed(1)}`;
    }
    
    if (claimBtn) {
        if (canClaim) {
            claimBtn.disabled = false;
            claimBtn.textContent = 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å';
        } else {
            claimBtn.disabled = true;
            claimBtn.textContent = '‚úÖ –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
    if (nextBonusTime) {
        if (canClaim) {
            nextBonusTime.textContent = '–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å!';
        } else {
            const nextDay = new Date();
            nextDay.setDate(nextDay.getDate() + 1);
            nextDay.setHours(0, 0, 0, 0);
            
            const now = new Date();
            const timeLeft = nextDay - now;
            
            const hours = Math.floor(timeLeft / (1000 * 60 * 60));
            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            
            nextBonusTime.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    updateCalendar();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    updateHistory();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
function claimDailyBonus() {
    const today = new Date().toDateString();
    
    if (bonusData.lastClaimDate === today) {
        if (tg && tg.showAlert) {
            tg.showAlert('–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!');
        }
        return;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
    const baseBonus = 100;
    const multiplier = Math.min(1 + (bonusData.streakDays * 0.1), 2.0);
    const finalBonus = Math.floor(baseBonus * multiplier);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é –¥–Ω–µ–π
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const yesterdayStr = yesterday.toDateString();
    
    if (bonusData.lastClaimDate === yesterdayStr) {
        bonusData.streakDays++;
    } else if (bonusData.lastClaimDate !== today) {
        bonusData.streakDays = 1;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    bonusData.lastClaimDate = today;
    bonusData.totalClaimed += finalBonus;
    bonusData.history.unshift({
        date: today,
        amount: finalBonus,
        streak: bonusData.streakDays
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (bonusData.history.length > 30) {
        bonusData.history = bonusData.history.slice(0, 30);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    saveBonusData();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–µ
    addCoinsToGame(finalBonus);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    showCoinAnimation();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateBonusUI();
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (tg && tg.showAlert) {
        tg.showAlert(`üéâ –ü–æ–ª—É—á–µ–Ω–æ ${finalBonus} –º–æ–Ω–µ—Ç!\n–°–µ—Ä–∏—è: ${bonusData.streakDays} –¥–Ω–µ–π`);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–µ
function addCoinsToGame(amount) {
    const gameData = JSON.parse(localStorage.getItem('magnumGameData') || '{}');
    gameData.coins = (gameData.coins || 0) + amount;
    localStorage.setItem('magnumGameData', JSON.stringify(gameData));
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç
function showCoinAnimation() {
    const animation = document.getElementById('coinAnimation');
    const flyingCoin = animation.querySelector('.flying-coin');
    
    if (animation && flyingCoin) {
        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞—á–∞–ª–∞
        const startX = Math.random() * window.innerWidth;
        const startY = Math.random() * window.innerHeight;
        
        flyingCoin.style.left = startX + 'px';
        flyingCoin.style.top = startY + 'px';
        
        animation.style.display = 'block';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            animation.style.display = 'none';
        }, 1000);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function updateCalendar() {
    const calendarGrid = document.getElementById('calendarGrid');
    if (!calendarGrid) return;
    
    calendarGrid.innerHTML = '';
    
    const today = new Date();
    const currentDay = today.getDay();
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –Ω–µ–¥–µ–ª—é
    for (let i = 0; i < 7; i++) {
        const dayDate = new Date(today);
        dayDate.setDate(today.getDate() - currentDay + i);
        const dayStr = dayDate.toDateString();
        
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        
        const dayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
        const dayName = dayNames[i];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–Ω—è
        if (dayStr === today.toDateString()) {
            dayElement.classList.add('today');
        } else if (dayDate < today) {
            const claimed = bonusData.history.some(h => h.date === dayStr);
            if (claimed) {
                dayElement.classList.add('claimed');
            }
        } else {
            dayElement.classList.add('future');
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –¥–ª—è –¥–Ω—è
        const dayStreak = i + 1;
        const baseBonus = 100;
        const multiplier = Math.min(1 + (dayStreak * 0.1), 2.0);
        const dayBonus = Math.floor(baseBonus * multiplier);
        
        dayElement.innerHTML = `
            <div class="day-number">${dayName}</div>
            <div class="day-bonus">${dayBonus}</div>
        `;
        
        calendarGrid.appendChild(dayElement);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
function updateHistory() {
    const historyList = document.getElementById('bonusHistory');
    if (!historyList) return;
    
    historyList.innerHTML = '';
    
    bonusData.history.slice(0, 10).forEach(entry => {
        const historyItem = document.createElement('div');
        historyItem.className = 'history-item';
        
        const date = new Date(entry.date);
        const formattedDate = date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
        
        historyItem.innerHTML = `
            <div class="history-date">${formattedDate}</div>
            <div class="history-amount">+${entry.amount}</div>
            <div class="history-streak">–°–µ—Ä–∏—è: ${entry.streak}</div>
        `;
        
        historyList.appendChild(historyItem);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
function updateNextBonusTime() {
    const nextBonusTime = document.getElementById('nextBonusTime');
    if (!nextBonusTime) return;
    
    const today = new Date().toDateString();
    const canClaim = !bonusData.lastClaimDate || bonusData.lastClaimDate !== today;
    
    if (canClaim) {
        nextBonusTime.textContent = '–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å!';
    } else {
        const nextDay = new Date();
        nextDay.setDate(nextDay.getDate() + 1);
        nextDay.setHours(0, 0, 0, 0);
        
        const now = new Date();
        const timeLeft = nextDay - now;
        
        const hours = Math.floor(timeLeft / (1000 * 60 * 60));
        const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
        
        nextBonusTime.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–æ–Ω—É—Å–æ–≤...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadBonusData();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    setInterval(updateNextBonusTime, 1000);
    
    console.log('–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.claimDailyBonus = claimDailyBonus;
