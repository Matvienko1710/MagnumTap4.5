// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tg = null;
try {
    tg = window.Telegram.WebApp;
    if (tg && tg.initData) {
        tg.ready();
        tg.expand();
        document.body.classList.add('tg-app');
        console.log('Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –∏–≥—Ä–µ');
    } else {
        console.log('Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    }
} catch (error) {
    console.log('Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', error);
}

// –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
let gameData = {
    coins: 0,
    clickPower: 1,
    autoClicker: 0,
    multiplier: 1,
    lucky: 0,
    upgrades: {
        clicker: { level: 0, cost: 10, baseCost: 10 },
        auto: { level: 0, cost: 50, baseCost: 50 },
        multiplier: { level: 0, cost: 200, baseCost: 200 },
        lucky: { level: 0, cost: 500, baseCost: 500 }
    },
    achievements: {
        firstClick: false,
        tenCoins: false,
        hundredCoins: false,
        thousandCoins: false,
        firstUpgrade: false,
        tenUpgrades: false
    },
    totalClicks: 0,
    totalCoinsEarned: 0
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function loadGameData() {
    const saved = localStorage.getItem('magnumCoinsGame');
    if (saved) {
        try {
            const parsed = JSON.parse(saved);
            gameData = { ...gameData, ...parsed };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveGameData() {
    try {
        localStorage.setItem('magnumCoinsGame', JSON.stringify(gameData));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    document.getElementById('coins').textContent = Math.floor(gameData.coins).toLocaleString();
    document.getElementById('cps').textContent = (gameData.autoClicker * gameData.multiplier).toFixed(1);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    Object.keys(gameData.upgrades).forEach(upgrade => {
        const data = gameData.upgrades[upgrade];
        document.getElementById(`${upgrade}Cost`).textContent = data.cost.toLocaleString();
        document.getElementById(`${upgrade}Level`).textContent = data.level;
        
        const button = document.querySelector(`[data-upgrade="${upgrade}"] .upgrade-btn`);
        if (button) {
            button.disabled = gameData.coins < data.cost;
        }
    });
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(type) {
    const upgrade = gameData.upgrades[type];
    
    if (gameData.coins >= upgrade.cost) {
        gameData.coins -= upgrade.cost;
        
        switch (type) {
            case 'clicker':
                gameData.clickPower += 1;
                break;
            case 'auto':
                gameData.autoClicker += 1;
                break;
            case 'multiplier':
                gameData.multiplier += 0.5;
                break;
            case 'lucky':
                gameData.lucky += 0.1;
                break;
        }
        
        upgrade.level += 1;
        upgrade.cost = Math.floor(upgrade.baseCost * Math.pow(1.15, upgrade.level));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        checkAchievements();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateUI();
        saveGameData();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (tg && tg.showAlert) {
            try {
                tg.showAlert(`‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ "${getUpgradeName(type)}" –∫—É–ø–ª–µ–Ω–æ!`);
            } catch (error) {
                console.log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            }
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è
function getUpgradeName(type) {
    const names = {
        clicker: '–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∏–∫',
        auto: '–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä',
        multiplier: '–ú–Ω–æ–∂–∏—Ç–µ–ª—å',
        lucky: '–£–¥–∞—á–∞'
    };
    return names[type] || type;
}

// –ö–ª–∏–∫ –ø–æ –º–æ–Ω–µ—Ç–µ
function clickCoin() {
    const baseCoins = gameData.clickPower;
    let earnedCoins = baseCoins;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
    earnedCoins *= gameData.multiplier;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞—á—É
    if (Math.random() < gameData.lucky) {
        earnedCoins *= 2;
        showFloatingCoin('ü™ô x2!', 'lucky');
    }
    
    gameData.coins += earnedCoins;
    gameData.totalClicks += 1;
    gameData.totalCoinsEarned += earnedCoins;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
    sessionClicks++;
    sessionCoins += earnedCoins;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–≤–∞—é—â—É—é –º–æ–Ω–µ—Ç—É
    showFloatingCoin(`+${Math.floor(earnedCoins)}`, 'normal');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    checkAchievements();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateUI();
    saveGameData();
}

// –ü–æ–∫–∞–∑ –ø–ª–∞–≤–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç
function showFloatingCoin(text, type = 'normal') {
    const coin = document.createElement('div');
    coin.className = 'floating-coin';
    coin.textContent = text;
    
    if (type === 'lucky') {
        coin.style.color = '#f39c12';
        coin.style.fontWeight = 'bold';
    }
    
    // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    const clickArea = document.getElementById('clickArea');
    const rect = clickArea.getBoundingClientRect();
    const x = Math.random() * (rect.width - 50);
    const y = Math.random() * (rect.height - 50);
    
    coin.style.left = (rect.left + x) + 'px';
    coin.style.top = (rect.top + y) + 'px';
    
    document.body.appendChild(coin);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
        if (coin.parentNode) {
            coin.parentNode.removeChild(coin);
        }
    }, 1000);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    const achievements = [
        { id: 'firstClick', condition: () => gameData.totalClicks >= 1, name: '–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫', desc: '–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫' },
        { id: 'tenCoins', condition: () => gameData.coins >= 10, name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π', desc: '–ù–∞–∫–æ–ø–∏—Ç–µ 10 –º–æ–Ω–µ—Ç' },
        { id: 'hundredCoins', condition: () => gameData.coins >= 100, name: '–ë–æ–≥–∞—á', desc: '–ù–∞–∫–æ–ø–∏—Ç–µ 100 –º–æ–Ω–µ—Ç' },
        { id: 'thousandCoins', condition: () => gameData.coins >= 1000, name: '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä', desc: '–ù–∞–∫–æ–ø–∏—Ç–µ 1000 –º–æ–Ω–µ—Ç' },
        { id: 'firstUpgrade', condition: () => Object.values(gameData.upgrades).some(u => u.level > 0), name: '–£–ª—É—á—à–∞—Ç–µ–ª—å', desc: '–ö—É–ø–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ' },
        { id: 'tenUpgrades', condition: () => Object.values(gameData.upgrades).reduce((sum, u) => sum + u.level, 0) >= 10, name: '–ú–∞—Å—Ç–µ—Ä', desc: '–ö—É–ø–∏—Ç–µ 10 —É–ª—É—á—à–µ–Ω–∏–π' }
    ];
    
    achievements.forEach(achievement => {
        if (!gameData.achievements[achievement.id] && achievement.condition()) {
            gameData.achievements[achievement.id] = true;
            showAchievement(achievement.name, achievement.desc);
        }
    });
    
    updateAchievementsUI();
}

// –ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function showAchievement(name, desc) {
    if (tg && tg.showAlert) {
        try {
            tg.showAlert(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${name}\n${desc}`);
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', error);
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function updateAchievementsUI() {
    const grid = document.getElementById('achievementsGrid');
    if (!grid) return;
    
    grid.innerHTML = '';
    
    const achievements = [
        { id: 'firstClick', icon: 'üëÜ', name: '–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫', desc: '–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫' },
        { id: 'tenCoins', icon: 'ü™ô', name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π', desc: '–ù–∞–∫–æ–ø–∏—Ç–µ 10 –º–æ–Ω–µ—Ç' },
        { id: 'hundredCoins', icon: 'üí∞', name: '–ë–æ–≥–∞—á', desc: '–ù–∞–∫–æ–ø–∏—Ç–µ 100 –º–æ–Ω–µ—Ç' },
        { id: 'thousandCoins', icon: 'üíé', name: '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä', desc: '–ù–∞–∫–æ–ø–∏—Ç–µ 1000 –º–æ–Ω–µ—Ç' },
        { id: 'firstUpgrade', icon: 'üîß', name: '–£–ª—É—á—à–∞—Ç–µ–ª—å', desc: '–ö—É–ø–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ' },
        { id: 'tenUpgrades', icon: 'üèÜ', name: '–ú–∞—Å—Ç–µ—Ä', desc: '–ö—É–ø–∏—Ç–µ 10 —É–ª—É—á—à–µ–Ω–∏–π' }
    ];
    
    achievements.forEach(achievement => {
        const div = document.createElement('div');
        div.className = `achievement ${gameData.achievements[achievement.id] ? 'unlocked' : ''}`;
        
        div.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <div class="achievement-name">${achievement.name}</div>
                <div class="achievement-desc">${achievement.desc}</div>
            </div>
        `;
        
        grid.appendChild(div);
    });
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã
function resetGame() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        localStorage.removeItem('magnumCoinsGame');
        location.reload();
    }
}

// –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
function autoClicker() {
    if (gameData.autoClicker > 0) {
        const earned = gameData.autoClicker * gameData.multiplier;
        gameData.coins += earned;
        gameData.totalCoinsEarned += earned;
        updateUI();
        saveGameData();
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
function showSection(sectionName) {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ–∫—Ü–∏—é:', sectionName);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    const sections = ['click-section', 'upgrades-section', 'achievements-section'];
    sections.forEach(section => {
        const element = document.getElementById(section);
        if (element) {
            element.style.display = 'none';
        }
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    const buttons = document.querySelectorAll('.nav-btn');
    buttons.forEach(btn => btn.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    let targetSection = '';
    let targetButton = null;
    
    switch (sectionName) {
        case 'click':
            targetSection = 'click-section';
            targetButton = document.querySelector('.nav-btn[onclick*="click"]');
            break;
        case 'upgrades':
            targetSection = 'upgrades-section';
            targetButton = document.querySelector('.nav-btn[onclick*="upgrades"]');
            break;
        case 'achievements':
            targetSection = 'achievements-section';
            targetButton = document.querySelector('.nav-btn[onclick*="achievements"]');
            break;
    }
    
    if (targetSection) {
        const element = document.getElementById(targetSection);
        if (element) {
            element.style.display = 'block';
            console.log('–ü–æ–∫–∞–∑–∞–Ω–∞ —Å–µ–∫—Ü–∏—è:', targetSection);
        }
    }
    
    if (targetButton) {
        targetButton.classList.add('active');
        console.log('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞:', targetButton.textContent);
    }
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
let sessionStartTime = Date.now();
let sessionClicks = 0;
let sessionCoins = 0;

function startSessionTracking() {
    sessionStartTime = Date.now();
    sessionClicks = 0;
    sessionCoins = 0;
}

function endSessionTracking() {
    const sessionDuration = Math.floor((Date.now() - sessionStartTime) / 1000);
    const sessionData = {
        coins: sessionCoins,
        clicks: sessionClicks,
        duration: sessionDuration,
        cps: gameData.cps
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    if (window.addSession) {
        window.addSession(sessionData);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUserActivity();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserActivity() {
    const today = new Date().toDateString();
    const activityData = JSON.parse(localStorage.getItem('magnumActivityData') || '{}');
    activityData[today] = true;
    localStorage.setItem('magnumActivityData', JSON.stringify(activityData));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadGameData();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ –º–æ–Ω–µ—Ç–µ
    const clickArea = document.getElementById('clickArea');
    if (clickArea) {
        clickArea.addEventListener('click', clickCoin);
        clickArea.addEventListener('touchstart', function(e) {
            e.preventDefault();
            e.stopPropagation();
        });
        clickArea.addEventListener('touchend', function(e) {
            e.preventDefault();
            e.stopPropagation();
            clickCoin();
        });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateUI();
    updateAchievementsUI();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
    setInterval(autoClicker, 1000);
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    setInterval(saveGameData, 10000);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∫–ª–∏–∫–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    showSection('click');
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    startSessionTracking();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Ö–æ–¥ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', endSessionTracking);
    
    console.log('–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});
